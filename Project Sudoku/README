# -----------------------------------------
# Name: Yifan Zhang, Yuxi Chen
# ID: 1635595, 1649014
# CMPUT 275, Winter 2020
# Project: Arduino Sudoku
# -----------------------------------------

Demo link: https://drive.google.com/open?id=18_JSqTK1OgZo0Tbt46__jYLogxlb7yw0

Breakdown:
    * Yuxi Chen: mainly design the interface and deal with the read and write of the SD card
    * Yifan Zhang: mainly design the algorithm of the sudoku and deal with the touching screen
    * The other parts are done by working together

Included Files:
    * project.cpp
    * global_define.h
    * interface.h
    * interface.cpp
    * sudoku.cpp
    * sudoku.h
    * README
    * Makefile

Accessories:
    * Arduino Mega 2560 Board ( AMG )
    * 1 tft display
    * 1 SD card

Wiring instructions :
    Please insert the tft touch screen properly

Running Instructions :
    1. Connect the Arduino to the PC using an A - B style USB cable . Ensure
        that the Arduino is using the proper serial port (/dev/ttyACM0)
    2. In the directory of project, use the command "make upload" to upload the
        code to the Arduino.

Userâ€™s manual:
    1. Upload the code to the Arduino properly.
    2. In the main menu, user can choose to play the sudoku or see the record by touching
        related button.
    3. In the stat menu, user can see the best time of each difficulty and the times user played
        of each difficulty, user can go back to the main menu by touching the back button.
    4. If user choose to play the sudoku, user should choose the difficulty of the game. If user
        haven't finished the game last time, user cna also choose to resume the game.
    5. In the game, user can fill the grid by choose the number in the bottom of the screen. the
        chosen number in a red triangle, then user can fill the grid by touching the place he want.
        If the number is correct, then the number will be shown, otherwise, it will show a red cross.
    6. User can also use the tip when playing the game, it will show a answer on the screen.
    7. When user finishes the game, it will show the time used. Then it will go to the stat menu.
       User can choose the button to go back to the main menu.


Contains functions:
    * project.cpp:
        * setup(): initialize the SD card and the screen

        * unsigned long getSeed(): create the random seed from the A7 pin on the Arduino

        * readRecord(): read the record from the sd card

        * updateRecord(): delete the record in the sd card and write the new one

        * mainMenu(): deal with the main menu

        * statMenu(): deal with the stat menu

        * difficultyMenu(bool &resume): deal with difficulty choosing menu

        * gameover():When the sudoku game is finished, show the used time and go to the statistics interface.

        * startGaming(): start a sudoku game

        * processGame(): Let the user choose the level to start a new game or resume the previous game

    * sudoku.cpp:(the functions for the class Sudoku)
        * Sudoku::newGame(difficulty level): generate a new sudoku game

        * Sudoku::initiate_grid(): clean the whole grids

        * Sudoku::isExist(int row, int colum, int num): check whether the number in this grid is valid

        * Sudoku::getRandomNumberList(): shuffle the number 1 to 9

        * Sudoku::getRandomSpaceList(): shuffle the whole space

        * Sudoku::findEmpty(int &row, int &colum): find the first empty block

        * Sudoku::solver(): generate a sudoku solution

        * Sudoku::dfs_find_solution(): The dancing link algorithm, the algorithm uses backtracking to generate the solution

        * Sudoku::getTips(int &grid_y, int &grid_x, int &num): When the user touches the tips button, a solution of one grid will be shown on the screen

        * Sudoku::generator(): generate puzzles

        * Sudoku::getValue(int x, int y): get the current value of the grid with given place(x,y)

        * Sudoku::getSolution(int x, int y): get the correct solution of the grid with given place(x,y)

        * Sudoku::isModifiable(int x, int y): Identify whether the place (x,y) is modifiable, if there's value on the grid, then it is not modifiable

        * Sudoku::fillGrid(int x, int y, int num): fill the given number in the grid with the place (x,y)

        * Sudoku::setResumeGrid(int x, int y, int num): set resumed grid with the given number and place (x,y)

        * Sudoku::setResumeSolution(int x, int y, int num): set the given resumed solution of the given place (x,y)

        * Sudoku::setResumeLevel(int x): set resumed level of the sudoku

        * Sudoku::countResult(): Count the spaces left in the sudoku, a new digit is filled in, the left number will minus 1

        * Sudoku::setTime(unsigned long time): set the using time of the sudoku

        * Sudoku::getTime(): get the using time of the sudoku

        * Sudoku::getLevel(): get level of the sudoku

        * Sudoku::setLevel(int l): set level of the sudoku

    * interface.cpp:
        * display_main_menu(MCUFRIEND_kbv *tft): The interface of the main menu

        * display_stat_menu(MCUFRIEND_kbv *tft, Record record): the interface of the state menu

        * display_diff_menu(MCUFRIEND_kbv *tft, bool resume): the interface of the difficulty menu

        * drawTheGrid(MCUFRIEND_kbv *tft, difficulty level, Sudoku sudoku): Draw the game interface

    * global_define.h: The custom definition for global using
        * enum difficulty: The difficulty of the sudoku

        * enum states: the state of the game

        * struct Record: the record of the game

